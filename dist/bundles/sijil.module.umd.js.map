{"version":3,"file":null,"sources":["../../src/services/require/httprequire.service.ts","../../src/services/require/require.interface.ts","../../src/services/parser/parser.interface.ts","../../src/services/parser/fragments.parser.ts","../../src/services/bundles.service.ts","../../src/services/sijil.opts.ts","../../src/components/s5l.component.ts","../../src/pipes/translate.pipe.ts","../../src/sijil.module.ts"],"sourcesContent":["import { RequireService } from './require.interface'\nimport { Injectable } from '@angular/core'\nimport { Http } from '@angular/http'\n\n/**\n * Fetches a bundle from a target url.\n * \n * @export\n * @class HttpRequireService\n * @implements {RequireService}\n */\n@Injectable()\nexport class HttpRequireService implements RequireService {\n\n    constructor(private http: Http){}\n\n    load(url) : Promise<Object> {\n        return this.http.get(url).toPromise()\n            .then(data => data.json())\n    }\n\n}","/**\n * Service used to fetch bundles.\n * \n * @export\n * @abstract\n * @class RequireService\n */\nexport abstract class RequireService {\n    /**\n     * Fetch a bundle. \n     * @memberOf RequireService\n     */\n    load: (from: any) => Promise<Object>\n}","export class ParserError extends Error {\n    constructor(public message: string, public fragment: string) {\n        super(message)\n    }\n}\n\nexport type ParserCallback = (_ : ParserError) => string\n/**\n * Parses logic inside translations.\n * \n * @export\n * @abstract\n * @class Parser\n */\nexport abstract class Parser {\n    /**\n     * Processes a string, isolating logic fragments and compiling them.\n     * \n     * @memberOf Parser\n     */\n    compile: (text: string, parameters: any, error?: ParserCallback) => string\n}","import { Parser, ParserCallback, ParserError } from './parser.interface'\n\n/**\n * The default Sijil parser.\n *\n * - Input : bundle value (translation) + parameters (Object or Array)\n * - Output : compiled translation\n *\n * Logic is contained inside mustache blocks : {{ LOGIC BLOCK }}\n *\n * There are two variants :\n *  - A single parameter key (when the params are contained inside an object) or index (params contained inside an array)\n *\n * Examples:\n *\n * {{ key }} + { \"key\" : \"my key\" } = my key\n *\n * {{ 1 }} + [1, 2] = 2\n *\n *  - A ternary-like condition\n *\n * {{ condition ? trueValue : falseValue }}\n * Where condition may be : a single parameter key/index, or 2 clauses with the following operators : ==, >, =>, <=, <\n *\n * Examples:\n *\n * (the $ sign to refer to a variable is mandatory when a clause contains more than 1 word)\n *\n * {{ count > 1 ? $count cats : 1 cat }} + {\"count\": 10} = 10 cats\n * {{ 1 < count ? $count cats : 1 cat }} + {\"count\": 1} = 1 cat\n *\n * @export\n * @class FragmentsParser\n * @implements {Parser}\n */\nexport class FragmentsParser implements Parser {\n\n    constructor(){}\n\n    private static delimiters: string[] = ['{{', '}}']\n    private static delimRegexp = new RegExp(`${FragmentsParser.delimiters[0]}[^}]+${FragmentsParser.delimiters[1]}`, 'gm')\n\n    private static defaultErrorCallback : ParserCallback = (e: ParserError) => {\n        console.error(e)\n        return e.fragment\n    }\n\n    private getParameter(parameters: Object | any[], fragment: string, strict?: boolean) : string {\n        let splittedFrag = fragment.split(/\\s+/)\n        if(splittedFrag.length === 1) {\n            return fragment[0] === \"$\" ?\n                parameters[fragment.substr(1)] :\n                strict ?\n                    fragment :\n                    parameters[fragment] !== undefined ?\n                        parameters[fragment] :\n                        fragment\n        }\n        return fragment.split(/\\s+/).reduce((l, r) => {\n            l.push(r[0] === \"$\" ? parameters[r.substr(1)] : r)\n            return l\n        }, []).join(' ')\n    }\n\n    private compileFragment(fragment: string, parameters: Object | any[]): string {\n        fragment = fragment.replace(/{{|}}/g, '')\n\n        let interrogationIndex, dotsIndex\n        if ((interrogationIndex = fragment.indexOf('?')) > 0 && (dotsIndex = fragment.lastIndexOf(':')) > 1) {\n            let condition = fragment.substring(0, interrogationIndex).trim()\n            let trueReturn = fragment.substring(interrogationIndex + 1, dotsIndex).trim()\n            let falseReturn = fragment.substring(dotsIndex + 1).trim()\n            let computedTrueReturn = this.getParameter(parameters, trueReturn)\n            let computedFalseReturn = this.getParameter(parameters, falseReturn)\n\n            let splittedCondition = condition.split(/\\s+/)\n\n            if (splittedCondition.length === 1) {\n\n                // Single variable case\n\n                let variable = parameters[splittedCondition[0]]\n\n                return variable ?\n                    computedTrueReturn :\n                    computedFalseReturn\n\n            } else if (splittedCondition.length === 3) {\n\n                // Operator case\n\n                let leftHandParam = this.getParameter(parameters, splittedCondition[0], parameters instanceof Array)\n                let rightHand = this.getParameter(parameters, splittedCondition[2], parameters instanceof Array)\n                let comparisonOperator = splittedCondition[1]\n\n                switch (comparisonOperator) {\n                    case '==':\n                        return leftHandParam == rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '>':\n                        return leftHandParam > rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '>=':\n                        return leftHandParam >= rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '<':\n                        return leftHandParam < rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '<=':\n                        return leftHandParam <= rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    default:\n                        throw new ParserError(`Invalid conditional operator for fragment : ${fragment}`, fragment)\n                }\n\n            } else {\n                throw new ParserError(`Invalid condition for fragment : ${fragment}`, fragment)\n            }\n        } else {\n            fragment = fragment.trim()\n            return parameters[fragment]\n        }\n    }\n\n    compile(rawTranslation: string, parameters: Object, onError?: ParserCallback): string {\n\n        let parts = rawTranslation.split(FragmentsParser.delimRegexp)\n        let fragments = rawTranslation.match(FragmentsParser.delimRegexp)\n\n        let compiledTranslation = \"\"\n\n        if (!onError)\n            onError = FragmentsParser.defaultErrorCallback\n\n        if (!fragments) {\n            compiledTranslation += rawTranslation\n        } else {\n            for (let i = 0; i < parts.length; i++) {\n                compiledTranslation += parts[i]\n                if (i > fragments.length - 1)\n                    continue\n                try {\n                    compiledTranslation += this.compileFragment(fragments[i], parameters)\n                } catch (e) {\n                    compiledTranslation += onError(e)\n                }\n            }\n        }\n\n        return compiledTranslation\n\n    }\n\n}","import { RequireService, SijilOpts, Parser } from './index'\n\n/**\n * Defines a BundlesService, whice is the main entry point for Sijil operations.\n *\n * A BundlesServices has three dependencies :\n * - RequireService : Used to fetch bundles\n * - Parser : Used to parse logic inside bundle values\n * - SijilOpts : An object containing custom settings\n */\nexport class BundlesService {\n\n    constructor(private requireService: RequireService, private parser: Parser, sijilOpts: SijilOpts) {\n        this.defaultLanguage = sijilOpts.defaultLanguage\n        if(!this.defaultLanguage && typeof window !== 'undefined'){\n            this.defaultLanguage = window.navigator.language.split('-')[0]\n        }\n        this.currentLanguage = this.defaultLanguage\n    }\n\n    private bundles: Object = {}\n    /**\n     * Fallback language.\n     */\n    defaultLanguage : string\n    /**\n     * Current language.\n     */\n    currentLanguage : string\n\n    /**\n     * Add keys/values to an existing bundle, or create it if missing.\n     *\n     * @param {Object} bundle An object containing translations as key / values.\n     * @param {string} [lang] The language to map the bundle with, or the current langugage if omitted.\n     */\n    addToBundle(bundle: Object, lang?: string) : void {\n        let targetLanguage = lang || this.currentLanguage || this.defaultLanguage || 'en'\n\n        if(!this.bundles[targetLanguage])\n            this.bundles[targetLanguage] = {}\n\n        let newBundle = {}\n        let oldBundle = {}\n\n        for(let key in bundle) {\n            newBundle[key] = bundle[key]\n        }\n        for(let key in oldBundle){\n            newBundle[key] = oldBundle[key]\n        }\n\n        this.bundles[targetLanguage] = newBundle\n\n        if(!this.currentLanguage)\n            this.currentLanguage = lang\n    }\n\n    /**\n     * Loads a bundle and associates it with a language.\n     * If the target language already contains key/values, then we mixin the new bundle and the existing one.\n     *\n     * @param {any} where The path, or whatever the RequireService needs to fetch the bundle.\n     * @param {string} [lang] The target language, or the current language if omitted.\n     * @returns {Promise<void>} A Promise, because the RequireService can be (is - by default) asynchronous.\n     */\n    loadBundle(where, lang?: string) : Promise<void> {\n        return this.requireService.load(where)\n            .then(bundle => {\n                this.addToBundle(bundle, lang)\n            })\n    }\n    /**\n     * Loads multiple bundles and associates then with a language.\n     *\n     * @see {@link loadBundle}\n     */\n    loadBundles(specs: { lang: string, where: any }[]): Promise<void[]> {\n        return Promise.all(specs.map((spec) => {\n            return this.loadBundle(spec.where, spec.lang)\n        }))\n    }\n\n    /**\n     * Removes a bundle from the bundles list.\n     *\n     * @param {string} lang Language to remove.\n     */\n    unloadBundle(lang: string) : void {\n        delete this.bundles[lang]\n    }\n\n    /**\n     * @returns {string[]} Returns a list of all loaded languages.\n     */\n    getLoadedLanguages() : string[] {\n        return Object.keys(this.bundles)\n    }\n\n    /**\n     * Translates a single key into a target language, using the parameters provided if needed.\n     *\n     * @param {string} key Key to translate\n     * @param {(Object | any[])} [parameters] Parameters to use if the translation contains logic.\n     * @param {string} [lang] Target language, of the current language if omitted.\n     * @returns {string} The computed translation, or the key if no match was found in the bundles (including the fallback language bundle).\n     */\n    translate(key: string, parameters?: Object | any[], lang?: string) : string {\n        let targetLanguage = lang || this.currentLanguage\n\n        let rawTranslation : string = this.bundles[targetLanguage] &&\n            this.bundles[targetLanguage][key] ||\n            this.defaultLanguage &&\n            this.bundles[this.defaultLanguage] &&\n            this.bundles[this.defaultLanguage][key] ||\n            key\n\n        if(rawTranslation !== key && parameters) {\n            return this.parser.compile(rawTranslation, parameters, (e) => { console.error(e); return key })\n        } else {\n            return rawTranslation\n        }\n\n    }\n\n}","/**\n * Contains Sijil options.\n * \n * @export\n * @abstract\n * @class SijilOpts\n */\nexport abstract class SijilOpts {\n    /** Fallback language when a translation is not available in the current language. */\n    defaultLanguage: string\n}\n\nexport let defaultSijilOpts : SijilOpts = {\n    defaultLanguage: typeof window !== 'undefined' ? window.navigator.language.split('-')[0] : undefined\n}","import { Component, Input, ElementRef, ViewChild, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core'\nimport { BundlesService } from '../services'\n\n@Component({\n    selector: 's5l',\n    template: `\n    <span #wrapper>\n        <ng-content></ng-content>\n    </span>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class S5lComponent implements AfterViewInit {\n\n    constructor(private bundlesService: BundlesService){}\n\n    @ViewChild(\"wrapper\") wrapperRef: ElementRef\n\n    private value: string\n    private loaded: boolean\n\n    @Input(\"s5l-params\")\n    private parameters: Object | any[]\n    @Input(\"s5l-lang\")\n    private fixedLanguage: string\n\n    private refreshTranslation() {\n        this.wrapperRef.nativeElement.innerHTML = this.bundlesService.translate(this.value, this.parameters, this.fixedLanguage)\n    }\n\n    ngAfterViewInit() : void {\n        this.value = this.wrapperRef.nativeElement.innerHTML.trim()\n        this.loaded = true\n        this.refreshTranslation()\n    }\n\n    ngDoCheck() {\n        if (!this.loaded)\n            return\n        this.refreshTranslation()\n    }\n}","import { BundlesService } from '../services';\nimport { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({name: 'translate', pure: false})\nexport class TranslatePipe {\n\n    constructor(private bundlesService: BundlesService){}\n\n    transform(key: string, parameters?: Object | any[], lang?: string) : string {\n        return this.bundlesService.translate(key, parameters, lang)\n    }\n\n}","import { NgModule, ModuleWithProviders, Type } from '@angular/core'\nimport { HttpModule } from '@angular/http'\n\nimport { S5lComponent } from './components'\nimport { TranslatePipe } from './pipes/translate.pipe'\nimport { HttpRequireService, RequireService, BundlesService, \n    SijilOpts, defaultSijilOpts, Parser, FragmentsParser } from './services/index'\nimport './rxjs-includes'\n\nlet moduleProviders = [\n    { provide: BundlesService, useClass: BundlesService, deps: [ RequireService, Parser, SijilOpts ] },\n    { provide: RequireService, useClass: HttpRequireService },\n    { provide: Parser, useClass: FragmentsParser },\n    { provide: SijilOpts, useValue: defaultSijilOpts }\n]\n\n/**\n * Sijil angular2 module.\n * \n * Usage :\n * \n * ```typescript\n * import { SijilModule } from 'sijil/dist'\n *\n * @NgModule({\n *   imports: [\n *       // ... //\n *      SijilModule\n *       // ... //\n *    ]\n * })\n * ```\n */\n@NgModule({\n    imports: [ HttpModule ],\n    declarations: [ S5lComponent, TranslatePipe ],\n    providers: moduleProviders,\n    exports: [ S5lComponent, TranslatePipe ]\n})\nexport class SijilModule {\n\n    static forRoot(require?: Type<RequireService>, parser?: Type<Parser>, options?: SijilOpts): ModuleWithProviders {\n        moduleProviders[1]['useClass'] = require || HttpRequireService\n        moduleProviders[2]['useClass'] = parser  || FragmentsParser\n        moduleProviders[3]['useValue'] = options || defaultSijilOpts\n        \n        return {\n            ngModule: SijilModule,\n            providers: moduleProviders\n        };\n    }\n\n}"],"names":["http","this","HttpRequireService","url","get","toPromise","then","data","json","Injectable","message","fragment","_super","__extends","Error","FragmentsParser","parameters","strict","splittedFrag","split","length","substr","undefined","reduce","l","r","push","join","replace","interrogationIndex","dotsIndex","indexOf","lastIndexOf","trim","condition","substring","trueReturn","falseReturn","computedTrueReturn","getParameter","computedFalseReturn","splittedCondition","variable","ParserError","leftHandParam","Array","rightHand","comparisonOperator","rawTranslation","onError","parts","delimRegexp","fragments","match","compiledTranslation","defaultErrorCallback","i","compileFragment","e","RegExp","delimiters","console","error","requireService","parser","sijilOpts","defaultLanguage","window","navigator","language","currentLanguage","BundlesService","bundle","lang","targetLanguage","bundles","newBundle","oldBundle","key","where","load","_this","addToBundle","specs","Promise","all","map","spec","loadBundle","Object","keys","compile","defaultSijilOpts","bundlesService","S5lComponent","wrapperRef","nativeElement","innerHTML","translate","value","fixedLanguage","loaded","refreshTranslation","__decorate","ViewChild","Input","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","TranslatePipe","Pipe","name","pure","moduleProviders","provide","useClass","deps","RequireService","Parser","SijilOpts","useValue","SijilModule","require","options","ngModule","providers","NgModule","imports","HttpModule","declarations","exports"],"mappings":"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"}