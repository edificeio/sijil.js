{"version":3,"file":null,"sources":["../../src/services/bundles.service.ts","../../src/services/parser/parser.interface.ts","../../src/services/parser/fragments.parser.ts","../../src/services/require/xhrrequire.service.ts","../../src/services/sijil.opts.ts","../../src/sijil.ts"],"sourcesContent":["import { RequireService, SijilOpts, Parser } from './index'\n\n/**\n * Defines a BundlesService, whice is the main entry point for Sijil operations.\n * \n * A BundlesServices has three dependencies :\n * - RequireService : Used to fetch bundles\n * - Parser : Used to parse logic inside bundle values\n * - SijilOpts : An object containing custom settings\n */\nexport class BundlesService {\n\n    constructor(private requireService: RequireService, private parser: Parser, sijilOpts: SijilOpts) {\n        this.defaultLanguage = sijilOpts.defaultLanguage\n        if(!this.defaultLanguage && typeof window !== 'undefined'){\n            this.defaultLanguage = window.navigator.language.split('-')[0]\n        }\n        this.currentLanguage = this.defaultLanguage\n    }\n\n    private bundles: Object = {}\n    /**\n     * Fallback language.\n     */\n    defaultLanguage : string\n    /**\n     * Current language.\n     */\n    currentLanguage : string\n\n    /**\n     * Add keys/values to an existing bundle, or create it if missing.\n     * \n     * @param {Object} bundle An object containing translations as key / values.\n     * @param {string} [lang] The language to map the bundle with, or the current langugage if omitted. \n     */\n    addToBundle(bundle: Object, lang?: string) : void {\n        let targetLanguage = lang || this.currentLanguage || this.defaultLanguage || 'en'\n\n        if(!this.bundles[targetLanguage])\n            this.bundles[targetLanguage] = {}\n\n        for(let key in bundle) {\n            this.bundles[targetLanguage][key] = bundle[key]\n        }\n\n        if(!this.currentLanguage)\n            this.currentLanguage = lang\n    }\n\n    /**\n     * Loads a bundle and associates it with a language.\n     * If the target language already contains key/values, then we mixin the new bundle and the existing one.\n     * \n     * @param {any} where The path, or whatever the RequireService needs to fetch the bundle.\n     * @param {string} [lang] The target language, or the current language if omitted.\n     * @returns {Promise<void>} A Promise, because the RequireService can be (is - by default) asynchronous.\n     */\n    loadBundle(where, lang?: string) : Promise<void> {\n        return this.requireService.load(where)\n            .then(bundle => {\n                this.addToBundle(bundle, lang)\n            })\n    }\n    /**\n     * Loads multiple bundles and associates then with a language.\n     * \n     * @see {@link loadBundle}\n     */\n    loadBundles(specs: { lang: string, where: any }[]): Promise<void[]> {\n        return Promise.all(specs.map((spec) => {\n            return this.loadBundle(spec.where, spec.lang)\n        }))\n    }\n\n    /**\n     * Removes a bundle from the bundles list.\n     * \n     * @param {string} lang Language to remove.\n     */\n    unloadBundle(lang: string) : void {\n        delete this.bundles[lang]\n    }\n\n    /**\n     * @returns {string[]} Returns a list of all loaded languages.\n     */\n    getLoadedLanguages() : string[] {\n        return Object.keys(this.bundles)\n    }\n\n    /**\n     * Translates a single key into a target language, using the parameters provided if needed.\n     * \n     * @param {string} key Key to translate\n     * @param {(Object | any[])} [parameters] Parameters to use if the translation contains logic.\n     * @param {string} [lang] Target language, of the current language if omitted.\n     * @returns {string} The computed translation, or the key if no match was found in the bundles (including the fallback language bundle).\n     */\n    translate(key: string, parameters?: Object | any[], lang?: string) : string {\n        let targetLanguage = lang || this.currentLanguage\n        \n        let rawTranslation : string = this.bundles[targetLanguage] &&\n            this.bundles[targetLanguage][key] ||\n            this.defaultLanguage &&\n            this.bundles[this.defaultLanguage] && \n            this.bundles[this.defaultLanguage][key] ||\n            key\n\n        if(rawTranslation !== key && parameters) {\n            return this.parser.compile(rawTranslation, parameters, (e) => { console.error(e); return key })\n        } else {\n            return rawTranslation\n        }\n\n    }\n\n}","export class ParserError extends Error {\n    constructor(public message: string, public fragment: string) {\n        super(message)\n    }\n}\n\nexport type ParserCallback = (_ : ParserError) => string\n/**\n * Parses logic inside translations.\n * \n * @export\n * @abstract\n * @class Parser\n */\nexport abstract class Parser {\n    /**\n     * Processes a string, isolating logic fragments and compiling them.\n     * \n     * @memberOf Parser\n     */\n    compile: (text: string, parameters: any, error?: ParserCallback) => string\n}","import { Parser, ParserCallback, ParserError } from './parser.interface'\n\n/**\n * The default Sijil parser.\n * \n * - Input : bundle value (translation) + parameters (Object or Array)\n * - Output : compiled translation\n * \n * Logic is contained inside mustache blocks : {{ LOGIC BLOCK }}\n * \n * There are two variants :\n *  - A single parameter key (when the params are contained inside an object) or index (params contained inside an array)\n *      \n * Examples: \n * \n * {{ key }} + { \"key\" : \"my key\" } = my key \n * \n * {{ 1 }} + [1, 2] = 2\n * \n *  - A ternary-like condition\n *      \n * {{ condition ? trueValue : falseValue }}\n * Where condition may be : a single parameter key/index, or 2 clauses with the following operators : ==, >, =>, <=, < \n * \n * Examples: \n * \n * (the $ sign to refer to a variable is mandatory when a clause contains more than 1 word)\n * \n * {{ count > 1 ? $count cats : 1 cat }} + {\"count\": 10} = 10 cats\n * {{ 1 < count ? $count cats : 1 cat }} + {\"count\": 1} = 1 cat\n * \n * @export\n * @class FragmentsParser\n * @implements {Parser}\n */\nexport class FragmentsParser implements Parser {\n\n    constructor(){}\n\n    private static delimiters: string[] = ['{{', '}}']\n    private static delimRegexp = new RegExp(`${FragmentsParser.delimiters[0]}[^}]+${FragmentsParser.delimiters[1]}`, 'gm')\n\n    private static defaultErrorCallback : ParserCallback = (e: ParserError) => {\n        console.error(e)\n        return e.fragment\n    }\n\n    private getParameter(parameters: Object | any[], fragment: string, strict?: boolean) : string {\n        let splittedFrag = fragment.split(/\\s+/)\n        if(splittedFrag.length === 1) {\n            return fragment[0] === \"$\" ? \n                parameters[fragment.substr(1)] : \n                strict ? \n                    fragment : \n                    parameters[fragment] || fragment\n        }\n        return fragment.split(/\\s+/).reduce((l, r) => {\n            l.push(r[0] === \"$\" ? parameters[r.substr(1)] : r)\n            return l\n        }, []).join(' ')\n    }\n\n    private compileFragment(fragment: string, parameters: Object | any[]): string {\n        fragment = fragment.replace(/{{|}}/g, '')\n\n        let interrogationIndex, dotsIndex\n        if ((interrogationIndex = fragment.indexOf('?')) > 0 && (dotsIndex = fragment.lastIndexOf(':')) > 1) {\n            let condition = fragment.substring(0, interrogationIndex).trim()\n            let trueReturn = fragment.substring(interrogationIndex + 1, dotsIndex).trim()\n            let falseReturn = fragment.substring(dotsIndex + 1).trim()\n            let computedTrueReturn = this.getParameter(parameters, trueReturn)\n            let computedFalseReturn = this.getParameter(parameters, falseReturn)\n\n            let splittedCondition = condition.split(/\\s+/)\n\n            if (splittedCondition.length === 1) {\n                \n                // Single variable case\n\n                let variable = parameters[splittedCondition[0]]\n\n                return variable ?\n                    computedTrueReturn :\n                    computedFalseReturn\n\n            } else if (splittedCondition.length === 3) {\n               \n                // Operator case\n\n                let leftHandParam = this.getParameter(parameters, splittedCondition[0], parameters instanceof Array)\n                let rightHand = this.getParameter(parameters, splittedCondition[2], parameters instanceof Array)\n                let comparisonOperator = splittedCondition[1]\n\n                switch (comparisonOperator) {\n                    case '==':\n                        return leftHandParam == rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '>':\n                        return leftHandParam > rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '>=':\n                        return leftHandParam >= rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '<':\n                        return leftHandParam < rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    case '<=':\n                        return leftHandParam <= rightHand ?\n                            computedTrueReturn :\n                            computedFalseReturn\n                    default:\n                        throw new ParserError(`Invalid conditional operator for fragment : ${fragment}`, fragment)\n                }\n                \n            } else {\n                throw new ParserError(`Invalid condition for fragment : ${fragment}`, fragment)\n            }\n        } else {\n            fragment = fragment.trim()\n            return parameters[fragment]\n        }\n    }\n\n    compile(rawTranslation: string, parameters: Object, onError?: ParserCallback): string {\n\n        let parts = rawTranslation.split(FragmentsParser.delimRegexp)\n        let fragments = rawTranslation.match(FragmentsParser.delimRegexp)\n\n        let compiledTranslation = \"\"\n\n        if (!onError)\n            onError = FragmentsParser.defaultErrorCallback\n\n        if (!fragments) {\n            compiledTranslation += rawTranslation\n        } else {\n            for (let i = 0; i < parts.length; i++) {\n                compiledTranslation += parts[i]\n                if (i > fragments.length - 1)\n                    continue\n                try {\n                    compiledTranslation += this.compileFragment(fragments[i], parameters)\n                } catch (e) {\n                    compiledTranslation += onError(e)\n                }\n            }\n        }\n\n        return compiledTranslation\n\n    }\n\n}","import { RequireService } from './require.interface'\n\nexport class XHRRequire implements RequireService {\n    \n    load(from: string, async?: boolean) : Promise<Object>{\n        return new Promise((resolve, reject) => {\n            let request = new XMLHttpRequest()\n\n            request.open('GET', from, !async)\n            request.responseType = \"json\"\n            request.onload = function(e) {\n                if(request.status === 200){\n                    let json = request.response\n                    resolve(json)\n                } else {\n                    console.log('Unsupported language.')\n                }\n            }\n            request.onerror = function(e) {\n                console.error(e)\n            }\n            request.send()\n        })\n    }\n\n}","/**\n * Contains Sijil options.\n * \n * @export\n * @abstract\n * @class SijilOpts\n */\nexport abstract class SijilOpts {\n    /** Fallback language when a translation is not available in the current language. */\n    defaultLanguage: string\n}\n\nexport let defaultSijilOpts : SijilOpts = {\n    defaultLanguage: typeof window !== 'undefined' ? window.navigator.language.split('-')[0] : undefined\n}","import { BundlesService } from './services/bundles.service'\nimport { RequireService}   from './services/require/require.interface'\nimport { FragmentsParser } from './services/parser/fragments.parser'\nimport { Parser } from './services/parser/parser.interface'\nimport { XHRRequire } from './services/require/xhrrequire.service'\nimport { defaultSijilOpts, SijilOpts } from './services/sijil.opts'\n\nlet bundlesService = new BundlesService(new XHRRequire(), new FragmentsParser(), defaultSijilOpts)\nbundlesService['factory'] = (require: RequireService, parser: Parser, opts: SijilOpts) => {\n    return new BundlesService(require || new XHRRequire(), parser || new FragmentsParser(), opts || defaultSijilOpts)\n}\nexport default bundlesService"],"names":["requireService","parser","sijilOpts","this","defaultLanguage","window","navigator","language","split","currentLanguage","BundlesService","bundle","lang","targetLanguage","bundles","key","where","load","then","_this","addToBundle","specs","Promise","all","map","spec","loadBundle","Object","keys","parameters","rawTranslation","compile","e","console","error","message","fragment","_super","__extends","Error","FragmentsParser","strict","splittedFrag","length","substr","reduce","l","r","push","join","replace","interrogationIndex","dotsIndex","indexOf","lastIndexOf","trim","condition","substring","trueReturn","falseReturn","computedTrueReturn","getParameter","computedFalseReturn","splittedCondition","variable","ParserError","leftHandParam","Array","rightHand","comparisonOperator","onError","parts","delimRegexp","fragments","match","compiledTranslation","defaultErrorCallback","i","compileFragment","RegExp","delimiters","XHRRequire","from","async","resolve","reject","request","XMLHttpRequest","open","responseType","onload","status","json","response","log","onerror","send","defaultSijilOpts","undefined","bundlesService","require","opts"],"mappings":"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"}